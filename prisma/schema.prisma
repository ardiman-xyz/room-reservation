generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum RoomImageType {
  COVER
  REGULAR
}

model Booking {
  id            String @id @default(cuid())
  userId 		String
  user   		User   @relation(fields: [userId], references: [id])
  startDate 	DateTime
  endDate 		DateTime
  dateCount 	Int
  purpose   	String?
  roomId		String
  room 			Room @relation(fields: [roomId], references: [id])
  BookingLog BookingLog[]
}


model BookingLog {
  id            String @id @default(cuid())
  bookingId 	String
  booking 		Booking @relation(fields: [bookingId], references: [id])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  password      String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(USER)
  Account       Account?
  Bookings      Booking[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String  @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String  @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model Building {
  id      String  @id @default(cuid())
  name    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  floors   Floor[]
}

model Floor  {
  id          String  @id @default(cuid())
  name        String
  buildingId  String
  building    Building @relation(fields: [buildingId], references: [id])
  room        Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Room {
  id          String  @id @default(cuid())
  name        String
  capacity    Int
  facilities  String
  floorId     String
  Floor       Floor @relation(fields: [floorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  booking 	  Booking[]
  RoomImages  RoomImage[]
}

model RoomImage {
  id        String    @id @default(cuid())
  roomId    String
  room      Room      @relation(fields: [roomId], references: [id])
  path      String
  type      RoomImageType @default(REGULAR)
}
